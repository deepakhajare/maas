#!/bin/bash

VERBOSITY=0
TEMP_D=""
DEF_PRESEED="http://bit.ly/uquick"
DEF_SIZE=4
DEF_MIRROR="http://archive.ubuntu.com/ubuntu"
DEF_ARCH=$(uname -m)
MY_DIR=${0%/*}
PATH=$MYDIR:$PATH

[ "$DEF_ARCH" = "x86_64" ] && DEF_ARCH=amd64

error() { echo "$@" 1>&2; }
errorp() { printf "$@" 1>&2; }
fail() { [ $# -eq 0 ] || error "$@"; exit 1; }
failp() { [ $# -eq 0 ] || errorp "$@"; exit 1; }

Usage() {
	cat <<EOF
Usage: ${0##*/} [ options ] release [ arch [ size ] ]

   Do an install of Ubuntu for release.
   arch : the arch to use (amd64 i386). Default: ${DEF_ARCH}
   size : size of the image (in GigaBytes). Default: ${DEF_SIZE}

   options:
    -o | --output  IMAGE_FILE    write the image to IMAGE_FILE
                                 default: <release>-<arch>.img
    -s | --preseed PRESEED       use the preseed at preseed
                                 default: ${DEF_PRESEED}
    -m | --mirror  MIRROR        mirror to download iso from MIRROR
                                 default: ${DEF_MIRROR}
         --iso     ISO           use ISO file rather than downloading
EOF
}

bad_Usage() { Usage 1>&2; [ $# -eq 0 ] || error "$@"; exit 1; }
cleanup() {
	[ -z "${TEMP_D}" -o ! -d "${TEMP_D}" ] || rm -Rf "${TEMP_D}"
}

dl() {
	local url="$1" out="${2}" opts=""
	[ "$url" = "$out" ] && return
	[ $VERBOSITY -lt 1 ] && opts="-q"
	case "$url" in
		http://*|ftp://*) wget $opts "$url" -O "${out}";;
		*) cat "${url}" > "${out}";;
	esac
}

debug() {
	local level=${1}; shift;
	[ "${level}" -ge "${VERBOSITY}" ] && return
	error "${@}"
}
update_latecommand() {
	local infile=$1 program=$2 replace=$3 base64=""
	base64=$(base64 --wrap 0 "${program}")
	# the '&' have to be escaped through sed
	str='f=$1; shift ; echo $0 | base64 --decode > "$f" \&\& chmod u+x "$f" \&\& "$f" "$@"'
	sed -e "s,$replace,in-target sh -c '$str' ${base64} /root/late-command," "${infile}"
}

short_opts="hm:o:p:v"
long_opts="help,iso:,mirror:,output:,preseed:,verbose"
getopt_out=$(getopt --name "${0##*/}" \
	--options "${short_opts}" --long "${long_opts}" -- "$@") &&
	eval set -- "${getopt_out}" ||
	bad_Usage

release="${DEF_RELEASE}"
preseed="${DEF_PRESEED}"
output=""
mirror="${DEF_MIRROR}"
arch="${DEF_ARCH}"
iso=""

while [ $# -ne 0 ]; do
	cur=${1}; next=${2};
	case "$cur" in
		-h|--help) Usage ; exit 0;;
		-i|--iso) iso=${2}; shift;;
		-m|--mirror) mirror=${2}; shift;;
		-o|--output) output=${2}; shift;;
		-p|--preseed) preseed=${2}; shift;;
		-v|--verbose) VERBOSITY=$((${VERBOSITY}+1));;
		--) shift; break;;
	esac
	shift;
done

[ $# -ne 0 ] || bad_Usage "must provide arguments"
[ $# -lt 1 -o $# -gt 3 ] && bad_Usage "must provide 1,2, or 3 args"
release=$1
arch=${2:-${DEF_ARCH}}
size=${3:-${DEF_SIZE}}
size=${size%G}

[ -n "$output" ] || output="${release}-${arch}.img"

TEMP_D=$(mktemp -d "${TMPDIR:-/tmp}/${0##*/}.XXXXXX") ||
	fail "failed to make tempdir"
trap cleanup EXIT

pre="${release}-${arch}"
if [ -z "$iso" ]; then
	iso="${release}-${arch}-mini.iso"
	if [ -f "$iso" ]; then
		debug 1 "using existing iso ${iso}"
	else
		url="${mirror}/dists/$release/main/installer-$arch/current/images/netboot/mini.iso" 
		debug 1 "downloading ${url}"
		dl "${url}" "${iso}" || fail "failed to download $iso from $url"
	fi
fi

dl "$preseed" $pre-preseed.cfg ||
	fail "failed to download preseed: ${preseed}"

update_latecommand $pre-preseed.cfg \
	late_command.sh __LATE_COMMAND__ > "${TEMP_D}/preseed.cfg" || fail "failed to update_latecommand"

debug 1 "extracting kernel and ramdisk"
for f in /linux /initrd.gz ; do
	isoinfo -RJ -x "$f" -i "$iso" > "${pre}-${f##*/}.dist" ||
		fail "failed to extract $f from $iso"
done

kernel="${pre}-linux.dist"
initrd="${pre}-initrd.gz"

debug 1 "repacking initramfs"
zcat "$initrd.dist" > "${TEMP_D}/initrd" &&
	( cd "${TEMP_D}" && echo "./preseed.cfg" |
		cpio -o --format=newc --append -F initrd &&
		gzip -9 initrd -c ) > "${initrd}" ||
	fail "failed to repack initrd"

debug 1 "creating a ${size}G disk in ${output}"
qemu-img create -f qcow2 "${output}" "${size}G" || 
	fail "failed to create image"

set -x
time ${KVM:-kvm} -kernel "$kernel" -initrd "$initrd" \
	-append "priority=critical locale=en_US" \
	-drive "file=${output},if=virtio,cache=unsafe" \
	-cdrom "${iso}" -m 512 -boot cd \
    -net nic,model=virtio -net user

# vi: ts=4 noexpandtab
