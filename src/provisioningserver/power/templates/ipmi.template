# -*- mode: shell-script -*-
#
# Control a system via ipmipower
#

# Parameters.
power_change={{power_change}}
power_address={{power_address}}
power_user={{power_user}}
power_pass={{power_pass}}
ipmipower={{ipmipower}}


formulate_power_state() {
    case $2 in
    'on') echo 'on' ;;
    'off') echo 'off' ;;
    *)
        echo "Got unknown power state from ipmipower: '$2'" >&2
        exit 1
    esac
}

# Issue command to ipmipower, for the given system.
issue_ipmi_command() {
    # See https://launchpad.net/bugs/1053391 for details of this workaround
    echo workaround |\
    ${ipmipower} -h ${power_address} -u ${power_user} -p ${power_pass} --$1
}


# Get the given system's power state: 'on' or 'off'.
get_power_state() {
    ipmi_state=$(issue_ipmi_command stat)
    formulate_power_state ${ipmi_state}
}


if [ "$(get_power_state)" != "${power_change}" ]
then
    issue_ipmi_command ${power_change}
fi
