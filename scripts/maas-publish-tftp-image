#!/usr/bin/env bash
# Copyright 2012 Canonical Ltd.  This software is licensed under the
# GNU Affero General Public License version 3 (see the file LICENSE).

# Exit immediately if a command exits with a non-zero status.
set -o errexit
# Treat unset variables as an error when substituting.
set -o nounset


# Make a kernel/initrd combination available over TFTP, so that nodes can
# netboot off it.


# Move local directory $1 into directory $2, so that it becomes $2/$1.
# If a directory of the same name already existed in $2, remove it along
# with all its contents.
# This will use "$2/$1.new" and "$2/$1.old" as temporary locations, which
# will also be deleted.
install_dir() {
    local name=$1 dest=$2
    # Use the "old"/"new" directories to maximize speed and minimize
    # inconvenience: ensure that the new directory contents are on the
    # partition they will ultimately need to be on, then move the old
    # ones out of the way and immediately replace them with the new, and
    # finally remove the old ones outside of the critical path.
    # This will not resolve races with ongoing downloads by booting nodes.
    # It merely minimizes this script's side of the race window.
    rm -rf -- $dest/$name.old $dest/$name.new
    # Put new downloads next to the old.  If any file copying is needed
    # because directories are on different partitions, it happens here.
    mv -- $name $dest/$name.new

    # Start of the critical window.

    # Move existing directory (if any) out of the way.
    [ -d $dest/$name ] && mv -- $dest/$name $dest/$name.old

    # Move new directory into place.
    mv -- $dest/$name.new $dest/$name

    # End of the critical window.

    # Clean up the old directory (if any).
    rm -rf -- $dest/$name.old
}


# Compare given file names between directories $1 and $2.  Print "yes" if
# they are all identical, or "no" if any of them are different or missing.
identical_files() {
    local lhs=$1 rhs=$2
    local file
    shift 2
    for file in $*
    do
        if ! cmp --quiet $lhs/$file $rhs/$file
        then
            echo "no"
            return
        fi
    done
    echo "yes"
}


# Install directory $1 containing kernel and initrd from inside
# directory $2 into directory $3, unless all of the files named as
# further arguments already exist in $3/$1 and are identical to their
# equivalents in $2.  If all files already exist and are identical, then
# $2/$1 will be removed.
#
# Thus, the directory $2/$1 either becomes $3/$1 or disappears if it is
# no different from an existing $3/$1.
install_image_dir() {
    local name=$1 src=$2 dest=$3
    local files
    shift 3
    files=$*

    # TODO: Prevent this change from upsetting any currently booting nodes.
    if [ $(identical_files $src/$name $dest/$name $files) = 'yes' ]
    then
        # There's nothing new to install.  Delete the source.
        rm -r -- $src/$name
    else
        echo "Updating $dest."
        install_dir $src $dest
    fi
}


install_image_dir $*
