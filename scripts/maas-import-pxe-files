#!/usr/bin/env bash
# Copyright 2012 Canonical Ltd.  This software is licensed under the
# GNU Affero General Public License version 3 (see the file LICENSE).
#
# Download static files needed for net-booting nodes through TFTP:
# pre-boot loader, kernels, and initrd images.
#
# This script downloads the required files into the TFTP home directory
# (by default, /var/lib/tftpboot).  Run it with the necessarily privileges
# to write them there.

# Exit immediately if a command exits with a non-zero status.
set -o errexit
# Treat unset variables as an error when substituting.
set -o nounset

# Load settings if available.
settings="/etc/maas/import_pxe_files"
[ -r $settings ] && . $settings
local_settings="$(pwd)/$settings"
[ -r $local_settings ] && . $local_settings

# Download location for Ubuntu releases.
ARCHIVE=${ARCHIVE:-http://archive.ubuntu.com/ubuntu/}

# Ubuntu releases that are to be downloaded.
SUPPORTED_RELEASES=$(distro-info --supported)
RELEASES=${RELEASES:-$SUPPORTED_RELEASES}

# The current Ubuntu release.
STABLE_RELEASE=$(distro-info --stable)
CURRENT_RELEASE=${CURRENT_RELEASE:-$STABLE_RELEASE}

# Supported architectures.
ARCHES=${ARCHES:-amd64 i386}

# Command line to download a resource at a given URL into the current
# directory.  A wget command line will work here, but curl will do as well.
DOWNLOAD=${DOWNLOAD:-wget --no-verbose}

# Whether to download ephemeral images as well: "1" for yes, "0" for no.
# Default is yes.
IMPORT_EPHEMERALS=${IMPORT_EPHEMERALS:-1}


# Put together a full URL for where the installer files for architecture $1
# and release $2 can be downloaded.
compose_installer_download_url() {
    local arch=$1 release=$2
    local installer_url="$ARCHIVE/dists/$release/main/installer-$arch"
    echo "$installer_url/current/images/netboot/ubuntu-installer/$arch/"
}


# Download the pre-boot loader, pxelinux.0, for architecture $1.  If
# successful, install it for netboot use.  (Not all architectures need this
# file, and there's rarely an urgent need for the very latest file, so if
# the download fails this function just skips it.)
update_pre_boot_loader() {
    local arch=$1
    local url=$(compose_installer_download_url $arch $CURRENT_RELEASE)
    if ! $DOWNLOAD $url/pxelinux.0
    then
        echo "Could not download pre-boot loader for $arch; skipping."
        return
    fi

    # If the file has changed, move it into place (replacing any previous
    # version).  Otherwise, leave the filesystem alone.
    if [ -f pxelinux.0 ]
    then
        # TODO: pxelinux.0 is downloaded but there's no reason why it can't
        # come from the syslinux package like chain.c32 is.
        maas-provision install-pxe-bootloader --loader='pxelinux.0'
        maas-provision install-pxe-bootloader \
            --loader='/usr/lib/syslinux/chain.c32'
        maas-provision install-pxe-bootloader \
            --loader='/usr/lib/syslinux/ifcpu64.c32'
    fi
}


# Download kernel/initrd for installing Ubuntu release $2 for
# architecture $1 and install it into the TFTP directory hierarchy.
update_install_files() {
    local arch=$1 release=$2
    local files="initrd.gz linux"
    local url=$(compose_installer_download_url $arch $release)
    local file

    mkdir "install"
    pushd "install" >/dev/null
    for file in $files
    do
        $DOWNLOAD $url/$file
    done
    popd >/dev/null

    maas-provision install-pxe-image \
        --arch=$arch --release=$release --purpose="install" \
        --image="install"
}


# Download and install the "install" images.
import_install_images() {
    local arch release DOWNLOAD_DIR

    DOWNLOAD_DIR=$(mktemp -d)
    echo "Downloading to temporary location $DOWNLOAD_DIR."
    pushd -- $DOWNLOAD_DIR

    # All files we create here are public.  The TFTP user will need to be
    # able to read them.
    umask a+r

    for arch in $ARCHES
    do
        update_pre_boot_loader $arch

        for release in $RELEASES
        do
            update_install_files $arch $release
        done
    done

    popd
    rm -rf -- $DOWNLOAD_DIR
}


# Download and install the ephemeral images.
import_ephemeral_images() {
    if test "$IMPORT_EPHEMERALS" != "0"
    then
        maas-import-ephemerals
    fi
}


main() {
    import_install_images
    import_ephemeral_images
}


main
