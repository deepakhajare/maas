# This document covers how to build your 'zimmer' disk image zimmer is the
# orchestra server in the environment.  You build by downloading a cloud
# image and booting it with some custom user data

$ MIRROR="https://cloud-images.ubuntu.com"
$ IMG_URL="$MIRROR/server/precise/current/precise-server-cloudimg-amd64-disk1.img"

# download the image
$ IMG_DIST="${IMG_URL##*/}.dist"
$ IMG="${IMG_DIST%.dist}"
$ wget "$IMG_URL" -O "$IMG_DIST"

# the images are qcow compressed disk images, which means they're
# painfully slow to use from a guest.  Convert that to qcow2 uncompressed
$ qemu-img convert -O qcow2 "$IMG_DIST" "$IMG"

# now, create some user-data to further customize the image
# the 'make-iso' in cloud-init is just used to create an ovf ISO
$ bzr branch lp:cloud-init cloud-init
$ ( cd cloud-init/doc/ovf/ &&
    ./make-iso ovf-env.xml.tmpl ../../../ud-build.txt -o - ) > build.iso

$ qemu-img create -f qcow2 -b $IMG build0.img
# on precise, you do do not need 'boot=on' in kvm commanad line
$ [ "$(lsb_release -sc)" = "precise" ] && bton="" || bton="boot=on"
$ time kvm -drive file=build0.img,if=virtio,cache=unsafe${bton:+,${bton}} \
   -boot c -cdrom build.iso \
   -net nic,model=virtio -net user,hostfwd=tcp::2222-:22 \
   -m 1024  \
   -nographic -serial file:build-console.log

# create a re-shrunk image of build0.img into 'zimmer-disk0.img.dist'
$ qemu-img convert -O qcow2 build0.img zimmer-disk0.img.dist
$ chmod 444 zimmer-disk0.img.dist

# optionally create a zip'd image for transmission
$ qemu-img convert -f qcow2 -O qcow2 -c zimmer-disk0.img.dist zimmer-disk0.zimg
