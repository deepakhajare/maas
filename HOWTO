- install some dependencies
  $ pkgs="$pkgs genisoimage base64" # for cloud-init's 'make-iso'

  $ sudo apt-get update
  $ sudo apt-get install -y $pkgs

- build a zimmer image by following readme in zimmer-build
  $ cd zimmer-build
  $ vi README
  ...

- create libvirt xml files for nodes, cobbler, network
  $ ./setup.py libvirt-setup

- start cobbler-devnet network
  $ virsh -c qemu:///system net-start cobbler-devnet

- create cobbler disk image qcow backing against pristine version
  $ qemu-img create -f qcow2 -b cobbler-server/oneiric-amd64.img  cobbler-disk0.img

- start cobbler instance
  $ virsh -c qemu:///system start cobbler

Now, 
 * you can ssh ubuntu@192.168.123.2 (password ubuntu)
   Then run 'ssh-import-id' or sudo.
 * http://192.168.123.2/cobbler_web should have cobbler web, log in with 'cobbler:cobbler'

- populate the nodes into the cobbler server
  $ ./setup.py cobbler-setup

- libvirt from the cobbler system:
  after 'cobbler-setup' above is done, the cobbler system will know about all the nodes
  and it will believe it can control them via the 'virsh' power module.  It is configured
  to talk to qemu+tcp://192.168.123.1:65001/system .  In order to allow that to be valid
  we have to make libvirt listen on that port/interface.  This can be done
  moderately securely with 'socat'.  Below, we tell socat to forward tcp connections
  on 192.168.123.1:65001 to the libvirt unix socket .  It restricts connections to
  the cobbler server's IP address.

  hostsystem$ socat -d -d \
     TCP4-LISTEN:65001,bind=192.168.123.1,range=192.168.123.2/32,fork \
     UNIX-CONNECT:/var/run/libvirt/libvirt-sock

  You can verify this is working by powering a sytem on from the web-ui or the following
  on the cobbler server:
  cobbler$ virsh -c qemu+tcp://192.168.123.1:65001/system
