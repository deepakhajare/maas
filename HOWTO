#! /bin/bash -e
#
# This file documents how to get odev running on your system.  But it's also
# a script; you may find that you can just run it and get a working setup.

## System-level setup.  This needs to be done only once.
./bin/system-setup

# The user may need to log out at this point.
echo "Ctrl-C if you want to log out now.  Otherwise, press <enter>."
read

## Build a zimmer image in this branch.
pushd zimmer-build
./build zimmer-disk0.img
popd

## Get zimmer and cobbler running.
./bin/start-odev

cobblerlogin=ubuntu@192.168.123.2
cat <<EOF
While we're waiting for the server to come up, let's set up ssh login to
the cobbler server at $cobblerlogin.

Please enter your Launchpad login name to import your ssh keys from Launchpad,
or an asterisk ("*") to import your local public ssh keys.  Enter nothing to
skip this step.

(If the server prompts you for a password, the default is "passw0rd")
EOF
read keyowner
./bin/authorize-ssh $cobblerlogin $keyowner

## populate the nodes into the cobbler server
./setup.py cobbler-setup

cat <<EOF
Starting virsh listener.

You can verify this is working by powering a sytem on from the web-ui or
the following on the cobbler server:

zimmmer$ virsh -c qemu+tcp://192.168.123.1:65001/system
EOF

## Listen for libvirt requests from the Cobbler server.
./bin/virsh-listener


## at this point you may want to modify zimmer to provide a proxy
##  other than itself to things installing from it (LP: #914202).
##  ssh to zimmer, and then edit :
##    /var/lib/cobbler/snippets/orchestra_proxy
